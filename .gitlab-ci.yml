variables:
  # Récupération des sous-modules Git
  GIT_SUBMODULE_STRATEGY: recursive
  # Configuration du cache pip
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - .ruff_cache/

stages:
  - lint
  - code-sbom
  - secure-code
  - test
  - doc
  - build-image
  - image-sbom
  - deploy
  #- deploy-staging
  # - deploy-prod

# Linting du code Ansible
ansible-lint:
  stage: lint
  image:
    name: python:3.12-alpine
  before_script:
    - pip install ansible-lint==24.2.2
    - cd ansible-k3s
  script:
    - ansible-lint -f codeclimate -v > ansible-lint-report.json
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    expire_in: 1 day
    reports:
      codequality: ansible-lint-report.json

# Linting du code Python
ruff:
  stage: lint
  image: python:3.12-alpine
  before_script:
    - pip install ruff==0.3.5
  script:
    - ruff check --output-format=junit -o ruff_report.xml
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    expire_in: 1 day
    reports:
      junit: ruff_report.xml

# Check du format du code
ruff-format:
  stage: lint
  image: python:3.12-alpine
  before_script:
    - pip install ruff==0.3.5
  script:
    - ruff format --check

# Linting du code Dockerfile
hadolint:
  stage: lint
  image: registry.gitlab.com/pipeline-components/hadolint:latest
  before_script:
    - find . -type f -name "Dockerfile*" -print
  script:
    - mkdir -p reports
    - for file in $(find . -type f -name "Dockerfile*"); do hadolint -f gitlab_codeclimate $file > reports/hadolint-$(md5sum $file | cut -d" " -f1).json; done
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    when: always
    reports:
      codequality:
        - "reports/*"
    paths:
      - "reports/*"

markdownlint:
  stage: lint
  image:
    name: davidanson/markdownlint-cli2
    entrypoint: [""]
  script:
    - /usr/local/bin/markdownlint-cli2 "**/*.md"

# SBOM du code
syft:
  stage: code-sbom
  image: ghcr.io/anchore/syft:debug
  script:
    - syft -o syft-json=/syft/code-sbom.json -o cyclonedx-json=syft-json=/syft/cyclonedx-code-sbom.json app/iut-stmalo-sae503
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - /syft/*sbom.json

# Vérification de la présence de secrets dans le code
gitleaks:
  stage: secure-code
  image: zricethezav/gitleaks:latest
  script:
    - gitleaks detect --path=. --report-format=junit --report-path=gitleaks-report.json
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    reports:
      junit:
        - "gitleaks-report.json"

# Génération de la documentation
pages:
  stage: doc
  image: python:3.12-alpine
  before_script:
    - pip install --no-cache mkdocs==1.5.3 mkdocs-material==9.5.14 'mkdocstrings[python]'==0.24.1 pymdown-extensions==10.7.1
  script:
    - mkdocs build --strict --verbose --site-dir docs
  artifacts:
    paths:
      - docs

docker-build-app:
  stage: build-image
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    # Installation des certificats pour le serveur GitLab
    - cp /usr/local/share/ca-certificates/gitlab.rt.lan.crt /kaniko/ssl/certs/gitlab.rt.lan.crt
    - cat /usr/local/share/ca-certificates/gitlab.rt.lan.crt >> /kaniko/ssl/certs/ca-certificates.crt
    # Configuration de l'image Docker
    # Si le commit n'est pas sur une branche ni un tag, on utilise le SHA court du commit
    - if [ -n "$CI_COMMIT_BRANCH" ] && [ -z "$CI_COMMIT_TAG" ]; then
      export CI_REGISTRY_IMAGE="${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}";
      export IMAGE_TAG="${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}";
      else
      export CI_REGISTRY_IMAGE="${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}";
      export IMAGE_TAG="${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}";
      fi
    # Si le tag est défini, on tag l'image avec le tag
    - if [ -n "$CI_COMMIT_TAG" ]; then
      export IMAGE_TAG="${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}";
      fi
    - echo "L'image Docker sera taggée avec le tag ${IMAGE_TAG}"
    - echo "IMAGE_TAG=${IMAGE_TAG}" > tag.env
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/app/Dockerfile"
      --destination "${IMAGE_TAG}"
  artifacts:
    reports:
      dotenv: tag.env

trivy:
  stage: build-image
  image: bitnami/trivy:latest
  variables:
    TRIVY_USERNAME: ${CI_REGISTRY_USER}
    TRIVY_PASSWORD: ${CI_REGISTRY_PASSWORD}
  script:
    - trivy image --format cyclonedx --output result_medium.json --exit-code 1 --severity MEDIUM,HIGH "${IMAGE_TAG}"
    - trivy image --format cyclonedx --output result_crit.json --exit-code 2 --severity CRITICAL "${IMAGE_TAG}"
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    reports:
      cyclonedx: result_*.json
    paths:
      - "result*.json"

kluctl-base-production-deploy:
  stage: deploy
  image: ghcr.io/abacf/gitops-sync:latest
  before_script:
    - TEMPFILE=$(mktemp)
    - cat "${GLOBAL_CLUSTER_KEY}" | base64 -d > $TEMPFILE
    - chmod 600 $TEMPFILE
    - export CLUSTER_KEY=$TEMPFILE
  variables:
    APP_PATH: "base-deploy"
  # Application de l'environnement de production
  environment:
    name: production
  script:
    - /app/gitops-sync.py
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "false"
      when: never
    - if: $CI_COMMIT_BRANCH

kluctl-base-staging-deploy:
  stage: deploy
  image: ghcr.io/abacf/gitops-sync:latest
  before_script:
    - TEMPFILE=$(mktemp)
    - cat "${GLOBAL_CLUSTER_KEY}" | base64 -d > $TEMPFILE
    - chmod 600 $TEMPFILE
    - export CLUSTER_KEY=$TEMPFILE
  variables:
    APP_PATH: "base-deploy"
  # Application de l'environnement de pré-production
  environment:
    name: staging
  script:
    - /app/gitops-sync.py
  rules:
    - if: $CI_COMMIT_REF_PROTECTED != "false"
      when: never
    - if: $CI_COMMIT_BRANCH

kluctl-production-deploy:
  stage: deploy
  image: ghcr.io/abacf/gitops-sync:latest
  before_script:
    - TEMPFILE=$(mktemp)
    - cat "${GLOBAL_CLUSTER_KEY}" | base64 -d > $TEMPFILE
    - chmod 600 $TEMPFILE
    - export CLUSTER_KEY=$TEMPFILE
  variables:
    APP_PATH: "app-deploy"
  environment:
    name: production
  script:
    - /app/gitops-sync.py
  rules:
    # Ne s'exécute que si le commit est sur une branche (MR non supportée)
    # et si la branche est protégée (i.e. une branche de production)
    - if: $CI_COMMIT_REF_PROTECTED == "false"
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

kluctl-staging-deploy:
  stage: deploy
  image: ghcr.io/abacf/gitops-sync:latest
  before_script:
    - TEMPFILE=$(mktemp)
    - cat "${GLOBAL_CLUSTER_KEY}" | base64 -d > $TEMPFILE
    - chmod 600 $TEMPFILE
    - export CLUSTER_KEY=$TEMPFILE
  variables:
    APP_PATH: "app-deploy"
  environment:
    name: staging
  script:
    - /app/gitops-sync.py
  rules:
    # Ne s'exécute que si le commit est sur une branche (MR non supportée)
    # Ne s'exécute pas si la branche est protégée (i.e. une branche de production)
    - if: $CI_COMMIT_REF_PROTECTED != "false"
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG
# deploy-k3s-staging:
#   stage: deploy-staging
#   image: cytopia/ansible:with-tools
#   variables:
#     ANSIBLE_STRATEGY_PLUGINS: /usr/lib/python3.10/site-packages/ansible_mitogen/plugins/strategy
#     ANSIBLE_STRATEGY: mitogen_linear
#   before_script:
#     - cat "${ANSIBLE_STAGING_PRIVATE_KEY}" | base64 -d | tee /root/.ssh/id_ed25519
#     - chmod 600 /root/.ssh/id_ed25519
#     - echo "StrictHostKeyChecking no" >> /root/.ssh/config
#   script:
#     - ansible-playbook -i ansible/inventory/hosts ansible/deploy-staging.yaml
#   environment:
#     name: production/${CI_COMMIT_REF_SLUG}
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
#       when: never
#     - if: $CI_COMMIT_BRANCH

# deploy-k3s-prod:
#   stage: deploy-prod
#   image: cytopia/ansible:with-tools
#   before_script:
#     - echo "${PROD_SSH_KEY}" > /root/.ssh/id_rsa
#     - chmod 600 /root/.ssh/id_rsa
#     - echo "StrictHostKeyChecking no" > /root/.ssh/config
#   script:
#     - ansible-playbook -i ansible/inventory/hosts ansible/deploy-prod.yaml
#   environment:
#     name: production/${CI_COMMIT_REF_SLUG}
#   rules:
#     - if: $CI_COMMIT_BRANCH != "main"
#       when: never
#     - if: $CI_COMMIT_BRANCH
