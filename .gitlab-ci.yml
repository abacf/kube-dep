variables:
  GIT_SUBMODULE_STRATEGY: recursive
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - .ruff_cache/

stages:
  - lint
  - code-sbom
  - secure-code
  - test
  - doc
  - build-image
  - secure-image
  - image-sbom
  - gitops-base
  - gitops-app
  - deploy
  #- deploy-staging
  # - deploy-prod

ansible-lint:
  stage: lint
  image:
    name: python:3.12-alpine
  before_script:
    - pip install --no-cache ansible-lint==24.2.1
  script:
    - ansible-lint -f codeclimate -v ansible-k3s/ > ansible-lint-report.json
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    expire_in: 1 day
    reports:
      codequality: ansible-lint-report.json

ruff:
  stage: lint
  image: python:3.12-alpine
  before_script:
    - pip install ruff==0.3.3
  script:
    - ruff check --output-format=junit -o ruff_report.xml
  artifacts:
    when: always
    expire_in: 1 day
    reports:
      junit: ruff_report.xml

ruff-format:
  stage: lint
  image: python:3.12-alpine
  before_script:
    - pip install ruff==0.3.3
  script:
    - ruff format --check

hadolint:
  stage: lint
  image: registry.gitlab.com/pipeline-components/hadolint:latest
  script:
    - mkdir -p reports
    - hadolint -f gitlab_codeclimate Dockerfile > reports/hadolint-$(md5sum Dockerfile | cut -d" " -f1).json
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    when: always
    reports:
      codequality:
        - "reports/*"
    paths:
      - "reports/*"

markdownlint:
  stage: lint
  image: 
    name: davidanson/markdownlint-cli2
    entrypoint: [""]
  script:
    - /usr/local/bin/markdownlint-cli2 "**/*.md"

syft:
  stage: code-sbom
  image: ghcr.io/anchore/syft:debug
  script:
    - syft -o syft-json=/syft/code-sbom.json -o cyclonedx-json=syft-json=/syft/cyclonedx-code-sbom.json app/iut-stmalo-sae503
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - /syft/*sbom.json

gitleaks:
  stage: secure-code
  image: zricethezav/gitleaks:latest
  script:
    - gitleaks detect --path=. --report-format=junit --report-path=gitleaks-report.json
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    reports:
      junit:
        - "gitleaks-report.json"

pages:
  stage: doc
  image: python:3.12-alpine
  before_script:
    - pip install --no-cache mkdocs==1.5.3 mkdocs-material==9.5.14 'mkdocstrings[python]'==0.24.1 pymdown-extensions==10.7.1
  script:
    - mkdocs build --strict --verbose --site-dir docs
  artifacts:
    paths:
      - docs

docker-build:
  stage: build-image
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - cp /usr/local/share/ca-certificates/gitlab.rt.lan.crt /kaniko/ssl/certs/gitlab.rt.lan.crt
    - cat /usr/local/share/ca-certificates/gitlab.rt.lan.crt >> /kaniko/ssl/certs/ca-certificates.crt
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"

trivy:
  stage: secure-image
  image: aquasec/trivy:0.49.1
  variables:
    TRIVY_USERNAME: ${CI_REGISTRY_USER}
    TRIVY_PASSWORD: ${CI_REGISTRY_PASSWORD}
  script:
    - trivy image --format cyclonedx --output result_medium.json --exit-code 1 --severity MEDIUM,HIGH "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
    - trivy image --format cyclonedx --output result_crid.json --exit-code 2 --severity CRITICAL "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - "result*.json"

kluctl-base-production-deploy:
  stage: gitops-base
  image: ghcr.io/abacf/gitops-sync:latest
  variables:
    APP_PATH: "base-deploy"
  environment:
    name: production
  when: manual
  rules:
    - if: $CI_COMMIT_REF_PROTECTED != "false"
      when: never

kluctl-base-staging-deploy:
  stage: gitops-base
  image: ghcr.io/abacf/gitops-sync:latest
  variables:
    APP_PATH: "base-deploy"
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH

kluctl-production-deploy:
  stage: gitops
  image: ghcr.io/abacf/gitops-sync:latest
  variables:
    APP_PATH: "app-deploy"
  environment:
    name: production
  when: manual
  rules:
    - if: $CI_COMMIT_REF_PROTECTED != "false"
      when: never

kluctl-staging-deploy:
  stage: gitops
  image: ghcr.io/abacf/gitops-sync:latest
  variables:
    APP_PATH: "app-deploy"
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: never
    - if: $CI_COMMIT_BRANCH
# deploy-k3s-staging:
#   stage: deploy-staging
#   image: cytopia/ansible:with-tools
#   variables:
#     ANSIBLE_STRATEGY_PLUGINS: /usr/lib/python3.10/site-packages/ansible_mitogen/plugins/strategy
#     ANSIBLE_STRATEGY: mitogen_linear
#   before_script:
#     - cat "${ANSIBLE_STAGING_PRIVATE_KEY}" | base64 -d | tee /root/.ssh/id_ed25519
#     - chmod 600 /root/.ssh/id_ed25519
#     - echo "StrictHostKeyChecking no" >> /root/.ssh/config
#   script:
#     - ansible-playbook -i ansible/inventory/hosts ansible/deploy-staging.yaml
#   environment:
#     name: production/${CI_COMMIT_REF_SLUG}
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
#       when: never
#     - if: $CI_COMMIT_BRANCH

# deploy-k3s-prod:
#   stage: deploy-prod
#   image: cytopia/ansible:with-tools
#   before_script:
#     - echo "${PROD_SSH_KEY}" > /root/.ssh/id_rsa
#     - chmod 600 /root/.ssh/id_rsa
#     - echo "StrictHostKeyChecking no" > /root/.ssh/config
#   script:
#     - ansible-playbook -i ansible/inventory/hosts ansible/deploy-prod.yaml
#   environment:
#     name: production/${CI_COMMIT_REF_SLUG}
#   rules:
#     - if: $CI_COMMIT_BRANCH != "main"
#       when: never
#     - if: $CI_COMMIT_BRANCH
